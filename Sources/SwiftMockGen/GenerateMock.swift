/// The `@GenerateMock` macro generates a test mock class for the protocol to which it is attached.
/// A mock is a type of test double that observes and records interactions for later verification in your tests.
///
/// The `@GenerateMock` macro simplifies the task of writing test spies manually. It automatically generates a new
/// class (the mock) that implements the given protocol. It tracks and exposes information about how the protocol's
/// methods and properties were used, providing valuable insight for test assertions.
///
/// Usage:
/// ```swift
/// @GenerateMock
/// protocol ServiceProtocol {
///     var data: Data { get }
///     func fetchData(id: String) -> Data
/// }
/// ```
///
/// This example would generate a mock class named `ServiceMock` that implements `ServiceProtocol`.
/// The generated class includes properties and methods for tracking the number of method calls, the arguments
/// passed, whether the method was called, and so on.
///
/// Example of generated code:
/// ```swift
/// // BEGIN swift-mock-gen
/// // DO NOT EDIT. This mock class is generated by swift-mock-gen.
/// class ServiceMock: ServiceProtocol  {
///
///     var data: Data {
///         get {
///             getCount_data += 1
///             return underlying_data
///         }
///         set {
///             setCount_data += 1
///             underlying_data = newValue
///         }
///     }
///     var underlying_data: Data!
///     private (set) var getCount_data: Int = 0
///     private (set) var setCount_data: Int = 0
///     struct Invocation_fetchData {
///      let id: String
///     }
///     private (set) var invocations_fetchData = [Invocation_fetchData] ()
///
///     var handler_fetchData: ((String) -> Data)?
///
///     func fetchData(id: String) -> Data {
///         let invocation = Invocation_fetchData(
///             id: id
///         )
///         invocations_fetchData.append(invocation)
///         if let handler = handler_fetchData {
///             return handler(id)
///         }
///         fatalError("Please set handler_fetchData")
///     }
/// }
/// // END swift-mock-gen
/// ```
///
/// - NOTE: The `@GenerateMock` macro should only be applied to protocols. Applying it to other
///         declarations will result in an error.
@attached(peer, names: suffixed(Mock))
public macro GenerateMock() = #externalMacro(
    module: "SwiftMockGenMacro",
    type: "SwiftMockGenMacro"
)
