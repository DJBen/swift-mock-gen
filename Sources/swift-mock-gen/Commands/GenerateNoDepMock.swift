import ArgumentParser
import CLIUtils
import CodeGenerationFactories
import Foundation
import SwiftParser
import SwiftSyntax

struct GenerateNoDepMock: ParsableCommand, ParseCommand, MockGenCommand {
    static var configuration = CommandConfiguration(
        commandName: "gen",
        abstract: "Generate mock for given protocols in the provided source files. The generated mock needs no dependencies."
    )

    @OptionGroup
    var arguments: ParseArguments

    @OptionGroup
    var mockGenArguments: MockGenArguments

    @Flag(
        name: .long,
        inversion: .prefixedNo,
        help: "Surround with #if DEBUG directives. This ensures the mock only be included in DEBUG targets."
    )
    var surroundWithPoundIfDebug: Bool = false

    @Flag(
        name: .long,
        help: "Copy the original imports from the source file."
    )
    var copyImports: Bool = false

    func run() throws {
        if mockGenArguments.transitiveProtocolConformance {
            let resolver = ProtocolDepResolver(fileIteratorProvider: sourceFiles)
            let (results, emptyFiles) = try resolver.inheritanceMergedProtocolDecls(
                copyImports: copyImports,
                additionalImports: mockGenArguments.additionalImports
            )
            let protocolDeclResultGroupedByFileName = Dictionary(
                grouping: results,
                by: {
                    $0.fileName
                }
            )

            for (fileName, results) in protocolDeclResultGroupedByFileName {
                try processProtocolFile(
                    results.map(\.decl),
                    imports: results.map(\.imports).reduce([], +),
                    fileName: fileName
                )
            }

            for fileName in emptyFiles {
                try processEmptyFile(fileName)
            }
        } else {
            var sourceFilesList = sourceFiles()
            while let sourceFile = sourceFilesList.next() {
                try sourceFile.content.withUnsafeBufferPointer { sourceBuffer in
                    let tree = Parser.parse(source: sourceBuffer)
                    var imports: [ImportDeclSyntax] = []

                    if copyImports {
                        for codeBlockItemSyntax in tree.statements {
                            if let importDecl = codeBlockItemSyntax.item.as(ImportDeclSyntax.self) {
                                imports.append(importDecl)
                            }
                        }
                    }

                    for additionalImport in mockGenArguments.additionalImports {
                        imports.append(try ImportDeclSyntax("import \(raw: additionalImport)"))
                    }

                    try processProtocolFile(
                        tree.statements.compactMap {
                            $0.item.as(ProtocolDeclSyntax.self)
                        },
                        imports: imports,
                        fileName: sourceFile.fileName
                    )
                }
            }
        }
    }

    private func processProtocolFile(
        _ protocolDecls: [ProtocolDeclSyntax],
        imports: [ImportDeclSyntax],
        fileName: String?
    ) throws {
        try withFileHandler(fileName) { sink in
            try sink.stream("""
            // BEGIN swift-mock-gen
            // DO NOT EDIT. This mock class is generated by swift-mock-gen.

            """)

            for protocolDecl in protocolDecls {
                if mockGenArguments.excludeProtocols.contains(protocolDecl.name.trimmed.text) {
                    if arguments.verbose {
                        print("Skipping \(protocolDecl.name.trimmed.text)")
                    }
                    continue
                }
                let sourceFileSyntax = try SourceFileSyntax {
                    for decl in try NoDepSourceFactory().decls(
                        protocolDecl: protocolDecl,
                        surroundWithPoundIfDebug: surroundWithPoundIfDebug,
                        importDeclsToCopy: imports
                    ) {
                        decl
                    }
                }

                try sink.stream(sourceFileSyntax.formatted())
            }

            try sink.stream("""


            // END swift-mock-gen
            """)
        }
    }

    private func processEmptyFile(_ fileName: String) throws {
        try withFileHandler(fileName) { sink in
            try sink.stream("""
            // BEGIN swift-mock-gen
            // DO NOT EDIT. This mock class is generated by swift-mock-gen.
            // END swift-mock-gen
            """)
        }
    }
}
