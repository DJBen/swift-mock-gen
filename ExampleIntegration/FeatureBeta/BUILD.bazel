load("@build_bazel_rules_swift//swift:swift.bzl", "swift_library", "swift_test")
load("@swift_mock_gen//:generate_swift_mock.bzl", "generate_swift_mock_module")

swift_library(
    name = "Example",
    srcs = glob(["Sources/**/*.swift"]),
    deps = [
        "//CommonFeature",
    ],
    visibility = ["//visibility:public"],
    module_name = "Example",
)

swift_library(
    name = "ExampleImpl",
    srcs = glob(["ExampleImpl/**/*.swift"]),
    deps = [
        ":Example",
    ],
    visibility = ["//visibility:public"],
    module_name = "ExampleImpl",
)

generate_swift_mock_module(
    api_module = ":Example",
    srcs = glob(["Sources/**/*.swift"]),
    exclude_protocols = [],
)

generate_swift_mock_module(
    api_module = ":Example",
    srcs = glob(["Sources/**/*.swift"]),
    mock_module_name = "ExampleForAlphaMock",
    exclude_protocols = [],
)

swift_test(
    name = "ExampleImplTests",
    srcs = glob(["ExampleImplTests/**/*.swift"]),
    deps = [
        ":Example",
        ":ExampleImpl",
        ":ExampleMock", # a ${Target}Mock library will be synthesized consisting of mocks of all the protocols in the api_module library.
    ],
)
